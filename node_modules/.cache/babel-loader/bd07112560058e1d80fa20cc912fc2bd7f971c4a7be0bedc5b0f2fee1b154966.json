{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mt130\\\\Documents\\\\React\\\\react-apps\\\\src\\\\Components\\\\Questions.js\";\nimport Option from \"./Option\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Questions({\n  questions,\n  activeQuestion,\n  dispatch,\n  answer\n}) {\n  let currentquestion = questions.find((question, index) => index === activeQuestion);\n  let Answer = answer;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: currentquestion.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: currentquestion.options.map((option, index) => {\n        return /*#__PURE__*/_jsxDEV(Option, {\n          optionText: option,\n          index: index,\n          dispatch: dispatch,\n          Answer: Answer,\n          correctAnswer: currentquestion.correctOption\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["Option","jsxDEV","_jsxDEV","Fragment","_Fragment","Questions","questions","activeQuestion","dispatch","answer","currentquestion","find","question","index","Answer","children","fileName","_jsxFileName","lineNumber","columnNumber","className","options","map","option","optionText","correctAnswer","correctOption","_c","$RefreshReg$"],"sources":["C:/Users/mt130/Documents/React/react-apps/src/Components/Questions.js"],"sourcesContent":["import Option from \"./Option\";\r\n\r\nexport default function Questions({\r\n  questions,\r\n  activeQuestion,\r\n  dispatch,\r\n  answer,\r\n}) {\r\n  let currentquestion = questions.find(\r\n    (question, index) => index === activeQuestion\r\n  );\r\n  let Answer = answer;\r\n  return (\r\n    <>\r\n      <h4>{currentquestion.question}</h4>\r\n      <div className=\"options\">\r\n        {currentquestion.options.map((option, index) => {\r\n          return (\r\n            <Option\r\n              optionText={option}\r\n              key={option}\r\n              index={index}\r\n              dispatch={dispatch}\r\n              Answer={Answer}\r\n              correctAnswer={currentquestion.correctOption}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9B,eAAe,SAASC,SAASA,CAAC;EAChCC,SAAS;EACTC,cAAc;EACdC,QAAQ;EACRC;AACF,CAAC,EAAE;EACD,IAAIC,eAAe,GAAGJ,SAAS,CAACK,IAAI,CAClC,CAACC,QAAQ,EAAEC,KAAK,KAAKA,KAAK,KAAKN,cACjC,CAAC;EACD,IAAIO,MAAM,GAAGL,MAAM;EACnB,oBACEP,OAAA,CAAAE,SAAA;IAAAW,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAKL,eAAe,CAACE;IAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnCjB,OAAA;MAAKkB,SAAS,EAAC,SAAS;MAAAL,QAAA,EACrBL,eAAe,CAACW,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEV,KAAK,KAAK;QAC9C,oBACEX,OAAA,CAACF,MAAM;UACLwB,UAAU,EAAED,MAAO;UAEnBV,KAAK,EAAEA,KAAM;UACbL,QAAQ,EAAEA,QAAS;UACnBM,MAAM,EAAEA,MAAO;UACfW,aAAa,EAAEf,eAAe,CAACgB;QAAc,GAJxCH,MAAM;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKZ,CAAC;MAEN,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA,eACN,CAAC;AAEP;AAACQ,EAAA,GA7BuBtB,SAAS;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}